plugins {
    id 'java'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'fabric-loom' version '0.5.1' apply false
    id 'net.minecrell.licenser' version '0.4.1'
    id "org.ajoberstar.grgit" version "3.1.1"
    id 'com.matthewprenger.cursegradle' version "1.4.0"
}

class Globals {
    static def baseVersion = "1.0.0"
    static def mcVersion = "1.16.1"
    static def yarnVersion = "+build.21"
}

version = Globals.baseVersion

def getSubprojectVersion() {
    return Globals.baseVersion
}

allprojects {
    apply plugin: 'maven-publish'
    apply plugin: 'fabric-loom'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    group = "fr.catcore"

    def testt = it.name;
    sourceSets {
        testmod {
            compileClasspath += main.compileClasspath
            runtimeClasspath += main.runtimeClasspath
        }
    }

    dependencies {
        if (testt == "1.15.2") {
            minecraft "com.mojang:minecraft:1.15.2"
            mappings "net.fabricmc:yarn:1.15.2+build.17:v2"
        } else {
            minecraft "com.mojang:minecraft:$Globals.mcVersion"
            mappings "net.fabricmc:yarn:${Globals.mcVersion}${Globals.yarnVersion}:v2"
        }
        modCompile "net.fabricmc:fabric-loader:0.9.0+build.204"
    }

    configurations {
        dev
    }

    repositories {
        mavenLocal()
    }

    jar {
        classifier = "dev"
    }

    afterEvaluate {
        remapJar {
            input = file("${project.buildDir}/libs/$archivesBaseName-${version}-dev.jar")
            archiveName = "${archivesBaseName}-${version}.jar"
        }

        artifacts {
            dev file: file("${project.buildDir}/libs/$archivesBaseName-${version}-dev.jar"), type: "jar", builtBy: jar
        }

        processResources {
            inputs.property "version", project.version

            from(sourceSets.main.resources.srcDirs) {
                include "fabric.mod.json"
                expand "version": project.version
            }

            from(sourceSets.main.resources.srcDirs) {
                exclude "fabric.mod.json"
            }
        }
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
}

subprojects {

    dependencies {
//        testmodCompile sourceSets.main.output
    }

    task remapMavenJar(type: Copy, dependsOn: remapJar) {
        afterEvaluate {
            from("${project.buildDir}/libs/$archivesBaseName-${version}.jar")
            into("${project.buildDir}/libs/")
            rename { String fn -> "$archivesBaseName-${version}-maven.jar" }
        }
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                afterEvaluate {
                    artifact(file("${project.buildDir}/libs/$archivesBaseName-${version}-maven.jar")) {
                        builtBy remapMavenJar
                    }
                    artifact(sourcesJar) {
                        builtBy remapSourcesJar
                    }
                }
            }
        }
    }
}

task remapMavenJar(type: net.fabricmc.loom.task.RemapJarTask, dependsOn: jar) {
    afterEvaluate {
        input = file("${project.buildDir}/libs/${archivesBaseName}-${version}-dev.jar")
        archiveName = "${archivesBaseName}-${version}-maven.jar"
        addNestedDependencies = false
    }
}

subprojects.each { remapJar.dependsOn("${it.path}:remapJar") }

dependencies {
    afterEvaluate {
        subprojects.each {
            compile project(path: ":${it.name}", configuration: "dev")
            include project("${it.name}:")
        }
    }
}